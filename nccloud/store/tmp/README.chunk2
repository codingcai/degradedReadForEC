y (type=0), an
  additional path field is required:
    path     # path to a local directory where "uploaded" files are stored

  When using OpenStack Swift (type=1), four additional fields are required:
    path     # container name
    authurl  # URL for obtaining an auth token, used by the Swift CLI
    username # user name for obtaining an auth token, used by the Swift CLI
    password # key for obtaining an auth token, used by the Swift CLI


  Parameters for each storage repository is separated by a newline ('\n').
  Repositories must be described in exact order:
    [parameters for node 0]\n
    \n
    [parameters for node 1]\n
    \n
    ...
    [parameters for node n-1]\n
    \n
    [parameters for node n]\n       # this is the first spare node
    \n

  When repairing a faulty node, node n will be taken as the new node.


4.3 Backup file format [BAK]
----------------------------

  Files are backed up to a flat hierarchy (i.e., we care about only the
  filename).  Files are encoded to give a file metadata and file chunks.  When
  encoding a file named f, the metadata is named as f.meta, while the chunks are
  called f.chunk_, with _ replaced with the chunk's index (starts from 0).  One
  copy of the metadata is uploaded to each repository, along with the chunks
  belonging to that repository.

  Usually the metadata contains only the chunk size, in ASCII.  It is the case
  for both Reed-Solomon codes and replication.  In the case of FMSR codes, the
  metadata format is different.  Assuming we are using (n,k)-FMSR code, the
  metadata format is as follows.
    From the 0-th byte: [Encoding matrix with n(n-k) x k(n-k) coefficients]
    From the ( n(n-k) x k(n-k) )-th byte: [Chunk size in ASCII]
    Last four bytes: [Repair hints in ASCII]
                     The repair hints start with three bytes indicating the
                     previously repaired node (prefixed with zeroes if less than
                     100).  Then a final byte indicating the chunk selected in
                     the previous repair ('0' or '1') follows.


4.4 Uploading a file [UPL]
--------------------------

  usage: bin/nccloud config_file encode path_to_file_1 ... path_to_file_n

  This will first encode your files using the coding scheme specified in
  config_file, to give metadata and chunks named according to the original
  filenames.  For example, if path_to_file_1 is "template/config", the following
  files will be created in the temporary directory:
    config.meta config.chunk*
  The number of chunks is determined by the coding scheme specified.

  The metadata will then be replicated to each storage node.  The chunks will be
  uploaded to each of their corresponding node.


4.5 Downloading a file [DNL]
----------------------------

  usage: bin/nccloud config_file decode filename_1 ... filename_n

  For each file, this will first download the file metadata from the first
  accessible node to the temporary directory.  Also, this will download all
  chunks from the first k accessible nodes (k is specified by the coding
  scheme).  These chunks are decoded to give the original file under the
  temporary directory.


4.6 Repairing a file [RPR]
--------------------------

  usage: bin/nccloud config_file repair failed_node_# filename_1 ... filename_n

  In this case, we are trying to repair a failed node, its index specified as
  "failed_node_#" (indices start from 0, and follows the order of the storage
  nodes given in the config_file).

  For each file, this will first download the file metadata from the first
  accessible node to the temporary directory.  Depending on the metadata and
  coding scheme specified, this will retrieve chunks from surviving nodes that
  are needed to generate new chunks for replacing the failed node.  The chunks
  are generated under the temporary directory, and uploaded to the first spare
  node specified in the config file (node n).  Metadata on the nodes are updated
  if needed.

  After the repair, suppose your config_file is called "config", you will see a
  newly created file called 